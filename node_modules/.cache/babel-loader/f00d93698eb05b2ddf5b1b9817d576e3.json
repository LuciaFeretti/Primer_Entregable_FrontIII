{"ast":null,"code":"var _jsxFileName = \"D:\\\\Luli.Documentos\\\\Certified Tech Developer\\\\B6. Frontend III\\\\entregableFinal\\\\src\\\\components\\\\Item.js\",\n    _s = $RefreshSig$();\n\nimport '../index.css';\nimport { useState } from 'react'; // El componente Item no tiene componentes hijos.\n// ESTADO: Item debe tener un número para almacenar la cantidad de stock, la misma se la defina el padre a la hora de crearlo.\n// MÉTODOS: Item debe manejar el click de su boton para restar la cantidad en stock de sí mismo y a su vez poder aumentar el estado de su \"abuelo\" App.\n// PROPS: Item recibe todos los campos que muestra en pantalla: nombre, descripcion, stock y el métodos heredados para su uso.\n// Maqueta de Item:\n//    h3\n//    p\n//    h5 > span    (este span debe mostrar la cantidad si es mayor a 0 \"agotado\" si llega a 0)\n//    button       (este boton debe permitir comprar, pero si la cantidad es menor a 0 debe estar deshabilitado y decir \"Sin stock\")\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Item(nombre, descripcion, stock, sumar) {\n  _s();\n\n  const [counterStock, setCounterStock] = useState(stock);\n\n  const handlerRestar = () => {\n    setCounterStock(counterStock - 1);\n  }; // ni idea si es asi esto:\n  // cantStock = stock > 0 ? <span>{stock}</span> : <span>agotado</span>\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"producto\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Item, \"ZJWzuSj0RfWQyPJZkfLtyHSplWo=\");\n\n_c = Item;\n\nvar _c;\n\n$RefreshReg$(_c, \"Item\");","map":{"version":3,"names":["useState","Item","nombre","descripcion","stock","sumar","counterStock","setCounterStock","handlerRestar"],"sources":["D:/Luli.Documentos/Certified Tech Developer/B6. Frontend III/entregableFinal/src/components/Item.js"],"sourcesContent":["import '../index.css'\r\nimport { useState } from 'react'\r\n\r\n// El componente Item no tiene componentes hijos.\r\n// ESTADO: Item debe tener un número para almacenar la cantidad de stock, la misma se la defina el padre a la hora de crearlo.\r\n// MÉTODOS: Item debe manejar el click de su boton para restar la cantidad en stock de sí mismo y a su vez poder aumentar el estado de su \"abuelo\" App.\r\n// PROPS: Item recibe todos los campos que muestra en pantalla: nombre, descripcion, stock y el métodos heredados para su uso.\r\n// Maqueta de Item:\r\n//    h3\r\n//    p\r\n//    h5 > span    (este span debe mostrar la cantidad si es mayor a 0 \"agotado\" si llega a 0)\r\n//    button       (este boton debe permitir comprar, pero si la cantidad es menor a 0 debe estar deshabilitado y decir \"Sin stock\")\r\n\r\n\r\nexport default function Item(nombre, descripcion, stock, sumar) {\r\n\r\n  const [counterStock, setCounterStock] = useState(stock)\r\n\r\n  const handlerRestar = () => { \r\n      setCounterStock(counterStock - 1)\r\n  }\r\n  // ni idea si es asi esto:\r\n  // cantStock = stock > 0 ? <span>{stock}</span> : <span>agotado</span>\r\n\r\n  return (\r\n    <div className='producto'>\r\n      {/* maquetar Item aquí \r\n      <h3>{nombre}</h3>\r\n      <p>{descripcion}</p>\r\n      <h5>En stock: <span>{}</span></h5>\r\n      {counterStock > 0 ? <button onClick={handlerRestar}>COMPRAR</button> : <button disabled>Sin stock</button> }\r\n    */}\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":";;;AAAA,OAAO,cAAP;AACA,SAASA,QAAT,QAAyB,OAAzB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,eAAe,SAASC,IAAT,CAAcC,MAAd,EAAsBC,WAAtB,EAAmCC,KAAnC,EAA0CC,KAA1C,EAAiD;EAAA;;EAE9D,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAACI,KAAD,CAAhD;;EAEA,MAAMI,aAAa,GAAG,MAAM;IACxBD,eAAe,CAACD,YAAY,GAAG,CAAhB,CAAf;EACH,CAFD,CAJ8D,CAO9D;EACA;;;EAEA,oBACE;IAAK,SAAS,EAAC;EAAf;IAAA;IAAA;IAAA;EAAA,QADF;AAUD;;GApBuBL,I;;KAAAA,I"},"metadata":{},"sourceType":"module"}