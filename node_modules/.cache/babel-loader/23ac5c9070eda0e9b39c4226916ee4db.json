{"ast":null,"code":"import '../index.css';\nimport { useState } from 'react'; // El componente Item no tiene componentes hijos.\n// ESTADO: Item debe tener un número para almacenar la cantidad de stock, la misma se la defina el padre a la hora de crearlo.\n// MÉTODOS: Item debe manejar el click de su boton para restar la cantidad en stock de sí mismo y a su vez poder aumentar el estado de su \"abuelo\" App.\n// PROPS: Item recibe todos los campos que muestra en pantalla: nombre, descripcion, stock y el métodos heredados para su uso.\n// Maqueta de Item:\n//    h3\n//    p\n//    h5 > span    (este span debe mostrar la cantidad si es mayor a 0 \"agotado\" si llega a 0)\n//    button       (este boton debe permitir comprar, pero si la cantidad es menor a 0 debe estar deshabilitado y decir \"Sin stock\")\n\nconst Item = _ref => {\n  let {\n    nombre,\n    descripcion,\n    stock,\n    sumar\n  } = _ref;\n  retur;\n};\n/* \r\nexport default function Item(nombre, descripcion, stock, sumar) {\r\n\r\n  const [counterStock, setCounterStock] = useState(stock)\r\n\r\n  const handlerRestar = () => { \r\n      setCounterStock(counterStock - 1)\r\n  }\r\n  // ni idea si es asi esto:\r\n  // cantStock = stock > 0 ? <span>{stock}</span> : <span>agotado</span>\r\n\r\n  return (\r\n    <div className='producto'>\r\n      {/* maquetar Item aquí * /}\r\n      <h3>{nombre}</h3>\r\n      <p>{descripcion}</p>\r\n      <h5>En stock: <span>{}</span></h5>\r\n      {counterStock > 0 ? <button onClick={handlerRestar}>COMPRAR</button> : <button disabled>Sin stock</button> }\r\n    \r\n    </div>\r\n  )\r\n}\r\n*/\n\n\n_c = Item;\n\nvar _c;\n\n$RefreshReg$(_c, \"Item\");","map":{"version":3,"names":["useState","Item","nombre","descripcion","stock","sumar","retur"],"sources":["D:/Luli.Documentos/Certified Tech Developer/B6. Frontend III/entregableFinal/src/components/Item.js"],"sourcesContent":["import '../index.css'\r\nimport { useState } from 'react'\r\n\r\n// El componente Item no tiene componentes hijos.\r\n// ESTADO: Item debe tener un número para almacenar la cantidad de stock, la misma se la defina el padre a la hora de crearlo.\r\n// MÉTODOS: Item debe manejar el click de su boton para restar la cantidad en stock de sí mismo y a su vez poder aumentar el estado de su \"abuelo\" App.\r\n// PROPS: Item recibe todos los campos que muestra en pantalla: nombre, descripcion, stock y el métodos heredados para su uso.\r\n// Maqueta de Item:\r\n//    h3\r\n//    p\r\n//    h5 > span    (este span debe mostrar la cantidad si es mayor a 0 \"agotado\" si llega a 0)\r\n//    button       (este boton debe permitir comprar, pero si la cantidad es menor a 0 debe estar deshabilitado y decir \"Sin stock\")\r\n\r\nconst Item = ({nombre, descripcion, stock, sumar}) => { retur}\r\n\r\n/* \r\nexport default function Item(nombre, descripcion, stock, sumar) {\r\n\r\n  const [counterStock, setCounterStock] = useState(stock)\r\n\r\n  const handlerRestar = () => { \r\n      setCounterStock(counterStock - 1)\r\n  }\r\n  // ni idea si es asi esto:\r\n  // cantStock = stock > 0 ? <span>{stock}</span> : <span>agotado</span>\r\n\r\n  return (\r\n    <div className='producto'>\r\n      {/* maquetar Item aquí * /}\r\n      <h3>{nombre}</h3>\r\n      <p>{descripcion}</p>\r\n      <h5>En stock: <span>{}</span></h5>\r\n      {counterStock > 0 ? <button onClick={handlerRestar}>COMPRAR</button> : <button disabled>Sin stock</button> }\r\n    \r\n    </div>\r\n  )\r\n}\r\n*/\r\n"],"mappings":"AAAA,OAAO,cAAP;AACA,SAASA,QAAT,QAAyB,OAAzB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,IAAI,GAAG,QAAyC;EAAA,IAAxC;IAACC,MAAD;IAASC,WAAT;IAAsBC,KAAtB;IAA6BC;EAA7B,CAAwC;EAAEC,KAAK;AAAC,CAA9D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAxBML,I"},"metadata":{},"sourceType":"module"}